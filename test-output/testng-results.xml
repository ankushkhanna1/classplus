<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="18" passed="14" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-12-25T20:12:43 IST" name="Default suite" finished-at="2020-12-25T20:21:34 IST" duration-ms="530200">
    <groups>
    </groups>
    <test started-at="2020-12-25T20:12:43 IST" name="Default test" finished-at="2020-12-25T20:21:34 IST" duration-ms="530200">
      <class name="tests.FlowMapper">
        <test-method is-config="true" signature="generateIniFile()[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:12:43 IST" name="generateIniFile" finished-at="2020-12-25T20:12:43 IST" duration-ms="38" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateIniFile -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:12:46 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:12:54 IST" duration-ms="7859" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=-, STEP10=, PRIORITY=P, STEP02=, STEP13=, TCID=FlowMapper_000, STEP03=, STEP11=, STEP01=EnvTest_QA1, STEP12=, STEP06=, FCM=-, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=-, DESCRIPTION=Set environment to run test cases, TESTTYPE=no-check, STEP08=, STEP09=, FEATURE=-}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:12:54 IST" name="result" finished-at="2020-12-25T20:12:54 IST" duration-ms="275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:12:54 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:13:18 IST" duration-ms="24244" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=-, STEP10=, PRIORITY=P1, STEP02=LogoutTest_001, STEP13=, TCID=FlowMapper_001, STEP03=, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=-, DESCRIPTION=Login with valid credentials and logout, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Login}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:13:18 IST" name="result" finished-at="2020-12-25T20:13:19 IST" duration-ms="338" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:13:19 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:13:56 IST" duration-ms="37080" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=-, STEP10=, PRIORITY=P1, STEP02=LogoutTest_001, STEP13=, TCID=FlowMapper_002, STEP03=, STEP11=, STEP01=LoginTest_005, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=-, DESCRIPTION=Resend OTP during login, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Login}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:13:56 IST" name="result" finished-at="2020-12-25T20:13:56 IST" duration-ms="110" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:13:56 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:14:25 IST" duration-ms="28858" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_002, STEP13=, TCID=FlowMapper_022, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Success transaction for Mobile Postpaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:14:25 IST" name="result" finished-at="2020-12-25T20:14:27 IST" duration-ms="1766" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:14:27 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:15:02 IST" duration-ms="35913" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_003, STEP13=, TCID=FlowMapper_023, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Success transaction for DTH, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:15:02 IST" name="result" finished-at="2020-12-25T20:15:04 IST" duration-ms="1452" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:15:04 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:15:29 IST" duration-ms="25010" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_004, STEP13=, TCID=FlowMapper_024, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Success transaction for Datacard, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:15:29 IST" name="result" finished-at="2020-12-25T20:15:30 IST" duration-ms="1447" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:15:30 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:15:59 IST" duration-ms="28754" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_005, STEP13=, TCID=FlowMapper_025, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Negative, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Failed transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:15:59 IST" name="result" finished-at="2020-12-25T20:16:01 IST" duration-ms="1444" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:16:01 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:16:28 IST" duration-ms="27175" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_027, STEP13=, TCID=FlowMapper_047, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify SMS for success transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:16:28 IST" name="result" finished-at="2020-12-25T20:16:29 IST" duration-ms="1397" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:16:29 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:17:01 IST" duration-ms="32016" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_031, STEP13=, TCID=FlowMapper_051, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify SMS for Pending transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:17:01 IST" name="result" finished-at="2020-12-25T20:17:03 IST" duration-ms="1402" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:17:03 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:17:26 IST" duration-ms="23841" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_043, STEP13=, TCID=FlowMapper_063, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Yes, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify FCM for success transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at in.novopay.platform_ui.pages.web.RechargesPage.recharges(RechargesPage.java:462)
at tests.ui.RechargesTest.rechargesTest(RechargesTest.java:50)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at tests.FlowMapper.flowMapperTest(FlowMapper.java:105)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:17:26 IST" name="result" finished-at="2020-12-25T20:17:29 IST" duration-ms="2670" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=FAILURE method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:17:29 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:18:03 IST" duration-ms="34079" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_047, STEP13=, TCID=FlowMapper_067, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Yes, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify FCM for Pending transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : GR}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at in.novopay.platform_ui.pages.web.RechargesPage.recharges(RechargesPage.java:462)
at tests.ui.RechargesTest.rechargesTest(RechargesTest.java:50)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at tests.FlowMapper.flowMapperTest(FlowMapper.java:105)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:18:03 IST" name="result" finished-at="2020-12-25T20:18:05 IST" duration-ms="1863" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=FAILURE method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:18:05 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:18:36 IST" duration-ms="30675" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_052, STEP13=, TCID=FlowMapper_072, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Success transaction for DTH, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:18:36 IST" name="result" finished-at="2020-12-25T20:18:37 IST" duration-ms="1324" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:18:37 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:19:02 IST" duration-ms="24536" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_053, STEP13=, TCID=FlowMapper_073, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Success transaction for Datacard, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:19:02 IST" name="result" finished-at="2020-12-25T20:19:03 IST" duration-ms="1427" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:19:03 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:19:29 IST" duration-ms="25898" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_069, STEP13=, TCID=FlowMapper_089, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify SMS for success transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:19:29 IST" name="result" finished-at="2020-12-25T20:19:30 IST" duration-ms="1363" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:19:30 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:20:03 IST" duration-ms="32648" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_072, STEP13=, TCID=FlowMapper_092, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify SMS for Pending transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:20:03 IST" name="result" finished-at="2020-12-25T20:20:04 IST" duration-ms="1377" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:20:04 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:20:29 IST" duration-ms="24483" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_075, STEP13=, TCID=FlowMapper_095, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Yes, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify FCM for success transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at in.novopay.platform_ui.pages.web.RechargesPage.recharges(RechargesPage.java:462)
at tests.ui.RechargesTest.rechargesTest(RechargesTest.java:50)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at tests.FlowMapper.flowMapperTest(FlowMapper.java:105)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:20:29 IST" name="result" finished-at="2020-12-25T20:20:31 IST" duration-ms="1858" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=FAILURE method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:20:31 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:21:02 IST" duration-ms="31123" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_078, STEP13=, TCID=FlowMapper_098, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Yes, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify FCM for Pending transaction for Mobile Prepaid, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at in.novopay.platform_ui.pages.web.RechargesPage.recharges(RechargesPage.java:462)
at tests.ui.RechargesTest.rechargesTest(RechargesTest.java:50)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at tests.FlowMapper.flowMapperTest(FlowMapper.java:105)
at jdk.internal.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:21:02 IST" name="result" finished-at="2020-12-25T20:21:04 IST" duration-ms="2125" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=FAILURE method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:21:04 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T20:21:31 IST" duration-ms="27392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RECHARGES, STEP10=, PRIORITY=P1, STEP02=RechargesTest_096, STEP13=, TCID=FlowMapper_116, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Success transaction for Mobile Prepaid Special Recharge, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Recharge : ML}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:21:31 IST" name="result" finished-at="2020-12-25T20:21:33 IST" duration-ms="1339" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@505fc5a4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method is-config="true" signature="killDriver()[pri:0, instance:tests.FlowMapper@505fc5a4]" started-at="2020-12-25T20:21:33 IST" name="killDriver" finished-at="2020-12-25T20:21:34 IST" duration-ms="879" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killDriver -->
      </class> <!-- tests.FlowMapper -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>

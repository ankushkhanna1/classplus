<?xml version="1.0" encoding="UTF-8"?>
<<<<<<< HEAD
<testng-results ignored="0" total="9" passed="9" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-12-25T11:38:53 IST" name="Default suite" finished-at="2020-12-25T11:46:24 IST" duration-ms="451547">
    <groups>
    </groups>
    <test started-at="2020-12-25T11:38:53 IST" name="Default test" finished-at="2020-12-25T11:46:24 IST" duration-ms="451547">
      <class name="tests.FlowMapper">
        <test-method is-config="true" signature="generateIniFile()[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:38:53 IST" name="generateIniFile" finished-at="2020-12-25T11:38:53 IST" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateIniFile -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:38:55 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:38:57 IST" duration-ms="1859" status="PASS">
=======
<testng-results skipped="0" failed="1" total="3" passed="2">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="272344" started-at="2020-12-23T12:22:06Z" finished-at="2020-12-23T12:26:39Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="272344" started-at="2020-12-23T12:22:06Z" finished-at="2020-12-23T12:26:39Z">
      <class name="tests.FlowMapper">
        <test-method status="PASS" signature="generateIniFile()[pri:0, instance:tests.FlowMapper@146ba0ac]" name="generateIniFile" is-config="true" duration-ms="21" started-at="2020-12-23T17:52:06Z" finished-at="2020-12-23T17:52:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateIniFile -->
        <test-method status="PASS" signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@146ba0ac]" name="flowMapperTest" duration-ms="1852" started-at="2020-12-23T17:52:08Z" data-provider="getData" finished-at="2020-12-23T17:52:10Z">
>>>>>>> d49d60f8c5362bf5c575546a106c00f30d7dbf27
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=-, STEP10=, PRIORITY=P, STEP02=, STEP13=, TCID=FlowMapper_000, STEP03=, STEP11=, STEP01=EnvTest_QA1, STEP12=, STEP06=, FCM=-, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=-, DESCRIPTION=Set environment to run test cases, TESTTYPE=no-check, STEP08=, STEP09=, FEATURE=-}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
<<<<<<< HEAD
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:38:57 IST" name="result" finished-at="2020-12-25T11:38:57 IST" duration-ms="188" status="PASS">
=======
        <test-method status="PASS" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@146ba0ac]" name="result" is-config="true" duration-ms="172" started-at="2020-12-23T17:52:10Z" finished-at="2020-12-23T17:52:10Z">
>>>>>>> d49d60f8c5362bf5c575546a106c00f30d7dbf27
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
<<<<<<< HEAD
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:38:57 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:40:05 IST" duration-ms="68227" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_001, STEP13=, TCID=FlowMapper_119, STEP03=ElectricityTest_003, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify biller list and pay bill for BESCOM after fetching amount and entering mobile number again, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: CP}]]>
=======
        <test-method status="FAIL" signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@146ba0ac]" name="flowMapperTest" duration-ms="164715" started-at="2020-12-23T17:52:10Z" data-provider="getData" finished-at="2020-12-23T17:54:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=RBL, STEP10=, PRIORITY=P0, STEP02=RBLBankingTest_065, STEP13=, TCID=FlowMapper_182, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=-, DESCRIPTION=Withdrawal - Success transaction (? 100) - VID, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Banking}]]>
>>>>>>> d49d60f8c5362bf5c575546a106c00f30d7dbf27
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[timeout
  (Session info: chrome=87.0.4280.88)
  (Driver info: chromedriver=2.35.528161 (5b82f2d2aae0ca24b877009200ced9065a772e73),platform=Windows NT 10.0.19041 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T14:04:26.12Z'
System info: host: 'ANKUSH-PC', ip: '10.212.134.4', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_261'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.35.528161 (5b82f2d2aae0ca..., userDataDir: C:\Users\Ankush\AppData\Loc...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 87.0.4280.88, webStorageEnabled: true}
Session ID: db443e75bdf79804f784536866b3b710]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: timeout
  (Session info: chrome=87.0.4280.88)
  (Driver info: chromedriver=2.35.528161 (5b82f2d2aae0ca24b877009200ced9065a772e73),platform=Windows NT 10.0.19041 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T14:04:26.12Z'
System info: host: 'ANKUSH-PC', ip: '10.212.134.4', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_261'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.35.528161 (5b82f2d2aae0ca..., userDataDir: C:\Users\Ankush\AppData\Loc...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 87.0.4280.88, webStorageEnabled: true}
Session ID: db443e75bdf79804f784536866b3b710
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
	at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:600)
	at org.openqa.selenium.remote.RemoteWebDriver$RemoteNavigation.refresh(RemoteWebDriver.java:856)
	at in.novopay.platform_ui.pages.web.RBLBankingPage.rblBanking(RBLBankingPage.java:488)
	at tests.ui.RBLBankingTest.rBLBankingTest(RBLBankingTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at tests.FlowMapper.flowMapperTest(FlowMapper.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
<<<<<<< HEAD
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:40:05 IST" name="result" finished-at="2020-12-25T11:40:07 IST" duration-ms="1843" status="PASS">
=======
        <test-method status="PASS" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@146ba0ac]" name="result" is-config="true" duration-ms="1556" started-at="2020-12-23T17:54:55Z" finished-at="2020-12-23T17:54:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=FAILURE method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@146ba0ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method status="PASS" signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@146ba0ac]" name="flowMapperTest" duration-ms="100341" started-at="2020-12-23T17:54:56Z" data-provider="getData" finished-at="2020-12-23T17:56:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=YBL, STEP10=, PRIORITY=P0, STEP02=YBLBankingTest_048, STEP13=, TCID=FlowMapper_252, STEP03=LogoutTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=, STEP05=, RUNMODE=Yes, WALLET=-, DESCRIPTION=Withdrawal - Verify SMS for success transaction, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Banking}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method status="PASS" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@146ba0ac]" name="result" is-config="true" duration-ms="1494" started-at="2020-12-23T17:56:36Z" finished-at="2020-12-23T17:56:38Z">
>>>>>>> d49d60f8c5362bf5c575546a106c00f30d7dbf27
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
<<<<<<< HEAD
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:40:07 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:40:52 IST" duration-ms="44641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_046, STEP13=, TCID=FlowMapper_138, STEP03=ElectricityStatusEnquiryTest_001, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Positive, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Status enquiry for a successful transaction, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: CP}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:40:52 IST" name="result" finished-at="2020-12-25T11:40:53 IST" duration-ms="1602" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:40:53 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:41:41 IST" duration-ms="47827" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_007, STEP13=, TCID=FlowMapper_139, STEP03=ElectricityStatusEnquiryTest_002, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Status enquiry for a failed transaction, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: CP}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:41:41 IST" name="result" finished-at="2020-12-25T11:41:42 IST" duration-ms="1184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:41:42 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:42:53 IST" duration-ms="70755" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_006, STEP13=, TCID=FlowMapper_143, STEP03=ElectricityStatusEnquiryTest_005, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=Negative, STEP07=, STEP04=ElectricityStatusEnquiryTest_006, STEP05=LogoutTest_001, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Refund for a later failed transaction and Status enquiry for refunded transaction, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: CP}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:42:53 IST" name="result" finished-at="2020-12-25T11:42:54 IST" duration-ms="1357" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:42:54 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:43:40 IST" duration-ms="45558" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_005, STEP13=, TCID=FlowMapper_144, STEP03=ElectricityStatusEnquiryTest_007, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Status Enquiry via section using Mobile Number, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: CP}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:43:40 IST" name="result" finished-at="2020-12-25T11:43:41 IST" duration-ms="1359" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:43:41 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:44:33 IST" duration-ms="51432" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_005, STEP13=, TCID=FlowMapper_147, STEP03=ElectricityStatusEnquiryTest_010, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Status Enquiry via page using Mobile Number, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: CP}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:44:33 IST" name="result" finished-at="2020-12-25T11:44:34 IST" duration-ms="1311" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:44:34 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:45:35 IST" duration-ms="60661" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_023, STEP13=, TCID=FlowMapper_157, STEP03=ElectricityTest_022, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Verify biller list and pay bill for MSEDC after paying the bill and entering mobile number again, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: BA}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:45:35 IST" name="result" finished-at="2020-12-25T11:45:36 IST" duration-ms="1343" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method signature="flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:45:36 IST" name="flowMapperTest" data-provider="getData" finished-at="2020-12-25T11:46:22 IST" duration-ms="46085" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{CONTRACT=BILLPAY, STEP10=, PRIORITY=P0, STEP02=ElectricityTest_024, STEP13=, TCID=FlowMapper_176, STEP03=ElectricityStatusEnquiryTest_003, STEP11=, STEP01=LoginTest_001, STEP12=, STEP06=, FCM=, STEP07=, STEP04=LogoutTest_001, STEP05=, RUNMODE=Yes, WALLET=Main, DESCRIPTION=Status enquiry for a pending to pending transaction, TESTTYPE=Positive, STEP08=, STEP09=, FEATURE=Electricity: BA}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flowMapperTest -->
        <test-method is-config="true" signature="result(org.testng.ITestResult)[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:46:22 IST" name="result" finished-at="2020-12-25T11:46:23 IST" duration-ms="1298" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=flowMapperTest status=SUCCESS method=FlowMapper.flowMapperTest(java.util.HashMap)[pri:0, instance:tests.FlowMapper@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- result -->
        <test-method is-config="true" signature="killDriver()[pri:0, instance:tests.FlowMapper@28f3b248]" started-at="2020-12-25T11:46:23 IST" name="killDriver" finished-at="2020-12-25T11:46:24 IST" duration-ms="654" status="PASS">
=======
        <test-method status="PASS" signature="killDriver()[pri:0, instance:tests.FlowMapper@146ba0ac]" name="killDriver" is-config="true" duration-ms="873" started-at="2020-12-23T17:56:38Z" finished-at="2020-12-23T17:56:39Z">
>>>>>>> d49d60f8c5362bf5c575546a106c00f30d7dbf27
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killDriver -->
      </class> <!-- tests.FlowMapper -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
